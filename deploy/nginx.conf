events {
    worker_connections 1024;
}

http {
    # Rate limiting zones
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=general:10m rate=5r/s;
    
    # Сначала определяем API запросы
    map $request_uri $is_api_request {
        default 0;
        ~*^/api/ 1;
    }
    
    # Blacklist common bot paths (но исключаем API endpoints)
    map $request_uri $is_bot_request {
        default 0;
        ~*/admin 1;
        ~*^/login 1;          # Блокируем только корневые /login, но не /api/*/login
        ~*/wp-login 1;        # WordPress login
        ~*/manage 1;
        ~*/cgi-bin 1;
        ~*/webpages 1;
        ~*/remote 1;
        ~*\.asp$ 1;
        ~*\.jsp$ 1;
        ~*\.php$ 1;
        ~*/+CSCOE+ 1;
        ~*/wp-admin 1;
        ~*/phpmyadmin 1;
    }
    
    # Log format with forwarded proto
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'proto=$http_x_forwarded_proto';

    # Upstream servers
    upstream backend {
        server backend:8080;
    }
    
    upstream frontend {
        server frontend:80;
    }

    server {
        listen 80;
        server_name _;
        
        access_log /var/log/nginx/access.log main;
        error_log /var/log/nginx/error.log warn;
        
        # Trust the X-Forwarded-Proto header from external nginx
        real_ip_header X-Forwarded-For;
        set_real_ip_from 172.16.0.0/12;  # Docker networks
        set_real_ip_from 10.0.0.0/8;     # Docker networks
        set_real_ip_from 192.168.0.0/16; # Local networks
        
        # Инициализируем переменную блокировки
        set $block_bot 0;
        
        # Block bot requests immediately (но не блокируем API)
        if ($is_bot_request = 1) {
            set $block_bot 1;
        }
        if ($is_api_request = 1) {
            set $block_bot 0;
        }
        if ($block_bot = 1) {
            return 403;
        }
        
        # Block common vulnerability scanners
        if ($http_user_agent ~* (nikto|sqlmap|nmap|masscan|nessus|openvas|crawl|bot|spider)) {
            return 403;
        }
        
        # Block empty user agents
        if ($http_user_agent = "") {
            return 403;
        }

        # API routes - направляем на бэкенд (убираем /api префикс)
        location /api/ {
            limit_req zone=api burst=20 nodelay;
            limit_req_status 429;
            
            proxy_pass http://backend/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $http_x_forwarded_proto;
            
            # CORS headers
            add_header Access-Control-Allow-Origin "$http_origin" always;
            add_header Access-Control-Allow-Credentials true always;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Authorization, Content-Type, Accept" always;
            
            if ($request_method = OPTIONS) {
                return 204;
            }
        }

        # Все запросы (включая статические файлы и SPA маршруты) - проксируем на frontend
        location / {
            limit_req zone=general burst=10 nodelay;
            limit_req_status 429;
            
            proxy_pass http://frontend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $http_x_forwarded_proto;
            
            # Не кэшируем HTML для SPA, но позволяем frontend nginx кэшировать статику
            proxy_set_header Cache-Control "no-cache";
        }
    }
} 