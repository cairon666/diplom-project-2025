// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: auth_proiders.sql

package dbqueries

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createAuthProvider = `-- name: CreateAuthProvider :exec
INSERT INTO "AUTH_PROVIDERS" (id, user_id, provider_name, provider_user_id, created_at)
VALUES ($1, $2, $3, $4, $5)
`

type CreateAuthProviderParams struct {
	ID             uuid.UUID
	UserID         uuid.UUID
	ProviderName   string
	ProviderUserID int64
	CreatedAt      time.Time
}

func (q *Queries) CreateAuthProvider(ctx context.Context, arg CreateAuthProviderParams) error {
	_, err := q.db.Exec(ctx, createAuthProvider,
		arg.ID,
		arg.UserID,
		arg.ProviderName,
		arg.ProviderUserID,
		arg.CreatedAt,
	)
	return err
}

const deleteAuthProviderById = `-- name: DeleteAuthProviderById :exec
DELETE
FROM "AUTH_PROVIDERS"
WHERE id = $1
`

func (q *Queries) DeleteAuthProviderById(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteAuthProviderById, id)
	return err
}

const deleteAuthProviderByUserId = `-- name: DeleteAuthProviderByUserId :exec
DELETE
FROM "AUTH_PROVIDERS"
WHERE user_id = $1
`

func (q *Queries) DeleteAuthProviderByUserId(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteAuthProviderByUserId, userID)
	return err
}

const getAuthProviderById = `-- name: GetAuthProviderById :one
SELECT id, user_id, provider_name, created_at, provider_user_id
from "AUTH_PROVIDERS"
WHERE id = $1
`

func (q *Queries) GetAuthProviderById(ctx context.Context, id uuid.UUID) (AUTHPROVIDER, error) {
	row := q.db.QueryRow(ctx, getAuthProviderById, id)
	var i AUTHPROVIDER
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ProviderName,
		&i.CreatedAt,
		&i.ProviderUserID,
	)
	return i, err
}

const getAuthProviderByProviderUserIdAndProviderName = `-- name: GetAuthProviderByProviderUserIdAndProviderName :one
SELECT id, user_id, provider_name, created_at, provider_user_id
from "AUTH_PROVIDERS"
WHERE provider_user_id = $1 AND provider_name = $2
`

type GetAuthProviderByProviderUserIdAndProviderNameParams struct {
	ProviderUserID int64
	ProviderName   string
}

func (q *Queries) GetAuthProviderByProviderUserIdAndProviderName(ctx context.Context, arg GetAuthProviderByProviderUserIdAndProviderNameParams) (AUTHPROVIDER, error) {
	row := q.db.QueryRow(ctx, getAuthProviderByProviderUserIdAndProviderName, arg.ProviderUserID, arg.ProviderName)
	var i AUTHPROVIDER
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ProviderName,
		&i.CreatedAt,
		&i.ProviderUserID,
	)
	return i, err
}

const getAuthProviderByUserIdAndProviderName = `-- name: GetAuthProviderByUserIdAndProviderName :one
SELECT id, user_id, provider_name, created_at, provider_user_id
from "AUTH_PROVIDERS"
WHERE user_id = $1 AND provider_name = $2
`

type GetAuthProviderByUserIdAndProviderNameParams struct {
	UserID       uuid.UUID
	ProviderName string
}

func (q *Queries) GetAuthProviderByUserIdAndProviderName(ctx context.Context, arg GetAuthProviderByUserIdAndProviderNameParams) (AUTHPROVIDER, error) {
	row := q.db.QueryRow(ctx, getAuthProviderByUserIdAndProviderName, arg.UserID, arg.ProviderName)
	var i AUTHPROVIDER
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ProviderName,
		&i.CreatedAt,
		&i.ProviderUserID,
	)
	return i, err
}

const getAuthProvidersByUserId = `-- name: GetAuthProvidersByUserId :many
SELECT id, user_id, provider_name, created_at, provider_user_id
from "AUTH_PROVIDERS"
WHERE user_id = $1
`

func (q *Queries) GetAuthProvidersByUserId(ctx context.Context, userID uuid.UUID) ([]AUTHPROVIDER, error) {
	rows, err := q.db.Query(ctx, getAuthProvidersByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AUTHPROVIDER
	for rows.Next() {
		var i AUTHPROVIDER
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ProviderName,
			&i.CreatedAt,
			&i.ProviderUserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
