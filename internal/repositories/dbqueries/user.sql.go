// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: user.sql

package dbqueries

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO "USERS" (id, email, first_name, last_name, is_registration_complete, created_at)
VALUES ($1, $2, $3, $4, $5, $6)
`

type CreateUserParams struct {
	ID                     uuid.UUID
	Email                  *string
	FirstName              string
	LastName               string
	IsRegistrationComplete bool
	CreatedAt              time.Time
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.Exec(ctx, createUser,
		arg.ID,
		arg.Email,
		arg.FirstName,
		arg.LastName,
		arg.IsRegistrationComplete,
		arg.CreatedAt,
	)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, first_name, last_name, is_registration_complete, created_at
from "USERS"
WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email *string) (USER, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i USER
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.IsRegistrationComplete,
		&i.CreatedAt,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, email, first_name, last_name, is_registration_complete, created_at
from "USERS"
WHERE id = $1
`

func (q *Queries) GetUserById(ctx context.Context, id uuid.UUID) (USER, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i USER
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.IsRegistrationComplete,
		&i.CreatedAt,
	)
	return i, err
}

const updateUserData = `-- name: UpdateUserData :exec
UPDATE "USERS"
SET (first_name, last_name) = ($2, $3)
WHERE id = $1
`

type UpdateUserDataParams struct {
	ID        uuid.UUID
	FirstName string
	LastName  string
}

func (q *Queries) UpdateUserData(ctx context.Context, arg UpdateUserDataParams) error {
	_, err := q.db.Exec(ctx, updateUserData, arg.ID, arg.FirstName, arg.LastName)
	return err
}

const updateUserEmail = `-- name: UpdateUserEmail :exec
UPDATE "USERS"
SET email = $2
WHERE id = $1
`

type UpdateUserEmailParams struct {
	ID    uuid.UUID
	Email *string
}

func (q *Queries) UpdateUserEmail(ctx context.Context, arg UpdateUserEmailParams) error {
	_, err := q.db.Exec(ctx, updateUserEmail, arg.ID, arg.Email)
	return err
}

const updateUserFull = `-- name: UpdateUserFull :exec
UPDATE "USERS"
SET (first_name, last_name, email, is_registration_complete) = ($2, $3, $4, $5)
WHERE id = $1
`

type UpdateUserFullParams struct {
	ID                     uuid.UUID
	FirstName              string
	LastName               string
	Email                  *string
	IsRegistrationComplete bool
}

func (q *Queries) UpdateUserFull(ctx context.Context, arg UpdateUserFullParams) error {
	_, err := q.db.Exec(ctx, updateUserFull,
		arg.ID,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.IsRegistrationComplete,
	)
	return err
}
