// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: device.sql

package dbqueries

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createDevice = `-- name: CreateDevice :one
INSERT INTO "DEVICES" (id, user_id, device_name, created_at)
VALUES ($1, $2, $3, $4)
RETURNING id, user_id, device_name, created_at
`

type CreateDeviceParams struct {
	ID         uuid.UUID
	UserID     uuid.UUID
	DeviceName string
	CreatedAt  time.Time
}

func (q *Queries) CreateDevice(ctx context.Context, arg CreateDeviceParams) (DEVICE, error) {
	row := q.db.QueryRow(ctx, createDevice,
		arg.ID,
		arg.UserID,
		arg.DeviceName,
		arg.CreatedAt,
	)
	var i DEVICE
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.DeviceName,
		&i.CreatedAt,
	)
	return i, err
}

const deleteDevice = `-- name: DeleteDevice :one
DELETE FROM "DEVICES"
WHERE id = $1
RETURNING id
`

func (q *Queries) DeleteDevice(ctx context.Context, id uuid.UUID) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, deleteDevice, id)
	err := row.Scan(&id)
	return id, err
}

const getDeviceByID = `-- name: GetDeviceByID :one
SELECT id, user_id, device_name, created_at
FROM "DEVICES"
WHERE id = $1
`

func (q *Queries) GetDeviceByID(ctx context.Context, id uuid.UUID) (DEVICE, error) {
	row := q.db.QueryRow(ctx, getDeviceByID, id)
	var i DEVICE
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.DeviceName,
		&i.CreatedAt,
	)
	return i, err
}

const listDevicesByUserID = `-- name: ListDevicesByUserID :many
SELECT id, user_id, device_name, created_at
FROM "DEVICES"
WHERE user_id = $1
ORDER BY created_at DESC
`

func (q *Queries) ListDevicesByUserID(ctx context.Context, userID uuid.UUID) ([]DEVICE, error) {
	rows, err := q.db.Query(ctx, listDevicesByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DEVICE
	for rows.Next() {
		var i DEVICE
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.DeviceName,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDeviceName = `-- name: UpdateDeviceName :one
UPDATE "DEVICES"
SET device_name = $2
WHERE id = $1
RETURNING id, user_id, device_name, created_at
`

type UpdateDeviceNameParams struct {
	ID         uuid.UUID
	DeviceName string
}

func (q *Queries) UpdateDeviceName(ctx context.Context, arg UpdateDeviceNameParams) (DEVICE, error) {
	row := q.db.QueryRow(ctx, updateDeviceName, arg.ID, arg.DeviceName)
	var i DEVICE
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.DeviceName,
		&i.CreatedAt,
	)
	return i, err
}
