// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: user_passwords.sql

package dbqueries

import (
	"context"

	"github.com/google/uuid"
)

const createUserPassword = `-- name: CreateUserPassword :exec
INSERT INTO "USER_PASSWORDS" (user_id, password_hash, salt)
VALUES ($1, $2, $3)
`

type CreateUserPasswordParams struct {
	UserID       uuid.UUID
	PasswordHash string
	Salt         string
}

func (q *Queries) CreateUserPassword(ctx context.Context, arg CreateUserPasswordParams) error {
	_, err := q.db.Exec(ctx, createUserPassword, arg.UserID, arg.PasswordHash, arg.Salt)
	return err
}

const deleteUserPassword = `-- name: DeleteUserPassword :exec
DELETE
FROM "USER_PASSWORDS"
WHERE user_id = $1
`

func (q *Queries) DeleteUserPassword(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteUserPassword, userID)
	return err
}

const getUserPassword = `-- name: GetUserPassword :one
SELECT user_id, password_hash, salt
from "USER_PASSWORDS"
WHERE user_id = $1
`

func (q *Queries) GetUserPassword(ctx context.Context, userID uuid.UUID) (USERPASSWORD, error) {
	row := q.db.QueryRow(ctx, getUserPassword, userID)
	var i USERPASSWORD
	err := row.Scan(&i.UserID, &i.PasswordHash, &i.Salt)
	return i, err
}

const updateUserPassword = `-- name: UpdateUserPassword :exec
UPDATE "USER_PASSWORDS"
SET password_hash = $2, salt = $3
WHERE user_id = $1
`

type UpdateUserPasswordParams struct {
	UserID       uuid.UUID
	PasswordHash string
	Salt         string
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) error {
	_, err := q.db.Exec(ctx, updateUserPassword, arg.UserID, arg.PasswordHash, arg.Salt)
	return err
}
