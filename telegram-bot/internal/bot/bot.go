package bot

import (
	"fmt"
	"regexp"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"go.uber.org/zap"

	"github.com/cairon666/vkr-backend/telegram-bot/internal/api"
	"github.com/cairon666/vkr-backend/telegram-bot/internal/config"
	"github.com/cairon666/vkr-backend/telegram-bot/internal/storage"
)

// Bot –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç Telegram –±–æ—Ç–∞
type Bot struct {
	api     *tgbotapi.BotAPI
	client  *api.Client
	storage *storage.Storage
	logger  *zap.Logger
	config  *config.Config
}

// NewBot —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
func NewBot(cfg *config.Config, logger *zap.Logger) (*Bot, error) {
	// –°–æ–∑–¥–∞–µ–º Telegram API –∫–ª–∏–µ–Ω—Ç
	botAPI, err := tgbotapi.NewBotAPI(cfg.Telegram.BotToken)
	if err != nil {
		return nil, fmt.Errorf("failed to create bot API: %w", err)
	}

	botAPI.Debug = cfg.Telegram.Debug

	// –°–æ–∑–¥–∞–µ–º HTTP –∫–ª–∏–µ–Ω—Ç –¥–ª—è API
	apiClient := api.NewClient(cfg.API.BaseURL, cfg.API.Timeout)

	// –°–æ–∑–¥–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
	store, err := storage.NewStorage(cfg.Storage.FilePath)
	if err != nil {
		return nil, fmt.Errorf("failed to create storage: %w", err)
	}

	return &Bot{
		api:     botAPI,
		client:  apiClient,
		storage: store,
		logger:  logger,
		config:  cfg,
	}, nil
}

// Start –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞
func (b *Bot) Start() error {
	b.logger.Info("Starting bot", zap.String("username", b.api.Self.UserName))

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := b.api.GetUpdatesChan(u)

	for update := range updates {
		if update.Message != nil {
			b.handleMessage(update.Message)
		}
	}

	return nil
}

// Stop –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–æ—Ç–∞
func (b *Bot) Stop() {
	b.api.StopReceivingUpdates()
	b.logger.Info("Bot stopped")
}

// handleMessage –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
func (b *Bot) handleMessage(message *tgbotapi.Message) {
	userID := message.From.ID
	chatID := message.Chat.ID

	b.logger.Info("Received message",
		zap.Int64("user_id", userID),
		zap.Int64("chat_id", chatID),
		zap.String("text", message.Text),
	)

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
	if message.IsCommand() {
		b.handleCommand(message)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è API –∫–ª—é—á
	user, exists := b.storage.GetUser(userID)
	if !exists {
		b.sendMessage(chatID, "‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.")
		return
	}

	if user.APIKey == "" {
		b.sendMessage(chatID, "‚ùå API –∫–ª—é—á –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /connect –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.")
		return
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
	b.handleRegularMessage(message, user)
}

// handleCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã
func (b *Bot) handleCommand(message *tgbotapi.Message) {
	chatID := message.Chat.ID
	userID := message.From.ID

	switch message.Command() {
	case "start":
		b.handleStartCommand(chatID, userID, message.From)
	case "connect":
		b.handleConnectCommand(chatID, userID, message.CommandArguments())
	case "disconnect":
		b.handleDisconnectCommand(chatID, userID)
	case "status":
		b.handleStatusCommand(chatID, userID)
	case "help":
		b.handleHelpCommand(chatID)
	case "rrintervals", "rr":
		b.handleRRIntervalsCommand(chatID, userID, message.CommandArguments())
	case "rrstats", "rrstatistics":
		b.handleRRStatisticsCommand(chatID, userID, message.CommandArguments())
	case "rranalyze", "rranalysis":
		b.handleRRAnalysisCommand(chatID, userID, message.CommandArguments())
	default:
		b.sendMessage(chatID, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.")
	}
}

// handleStartCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start
func (b *Bot) handleStartCommand(chatID, userID int64, from *tgbotapi.User) {
	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
	user := &storage.UserData{
		TelegramID: userID,
		Username:   from.UserName,
		FirstName:  from.FirstName,
		LastName:   from.LastName,
		CreatedAt:  time.Now().Format(time.RFC3339),
		UpdatedAt:  time.Now().Format(time.RFC3339),
	}

	if err := b.storage.SaveUser(user); err != nil {
		b.logger.Error("Failed to save user", zap.Error(err))
		b.sendMessage(chatID, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")
		return
	}

	message := `ÔøΩÔøΩ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ R-R Intervals Analytics Bot!

–≠—Ç–æ—Ç –±–æ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ R-R –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –∏ –≤–∞—Ä–∏–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–µ—Ä–¥–µ—á–Ω–æ–≥–æ —Ä–∏—Ç–º–∞ (HRV).

–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:

1Ô∏è‚É£ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞ –≤–µ–±-—Å–∞–π—Ç–µ:
üîó https://your-frontend-url.com/login

2Ô∏è‚É£ –°–æ–∑–¥–∞—Ç—å External App –∏ –ø–æ–ª—É—á–∏—Ç—å API –∫–ª—é—á:
üîó https://your-frontend-url.com/external-apps

3Ô∏è‚É£ –ü–æ–¥–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã:
/connect YOUR_API_KEY

–ü–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤—ã —Å–º–æ–∂–µ—Ç–µ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å R-R –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –ø—Ä—è–º–æ –≤ Telegram!

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.`

	b.sendMessage(chatID, message)
}

// handleConnectCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /connect
func (b *Bot) handleConnectCommand(chatID, userID int64, args string) {
	if args == "" {
		b.sendMessage(chatID, "‚ùå –£–∫–∞–∂–∏—Ç–µ API –∫–ª—é—á: /connect YOUR_API_KEY")
		return
	}

	apiKey := strings.TrimSpace(args)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç API –∫–ª—é—á–∞ (base64-–ø–æ–¥–æ–±–Ω–∞—è —Å—Ç—Ä–æ–∫–∞)
	apiKeyRegex := regexp.MustCompile(`^[A-Za-z0-9+/\-_]+=*$`)
	if len(apiKey) < 20 || len(apiKey) > 100 || !apiKeyRegex.MatchString(apiKey) {
		b.sendMessage(chatID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç API –∫–ª—é—á–∞. –ö–ª—é—á –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ —Å–∏–º–≤–æ–ª—ã +/-/=/_.")
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ API –∫–ª—é—á —Ä–∞–±–æ—Ç–∞–µ—Ç (–¥–µ–ª–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å)
	now := time.Now()
	from := now.AddDate(0, 0, -1) // –≤—á–µ—Ä–∞
	to := now

	// –ü–æ–ø—Ä–æ–±—É–µ–º —Å–¥–µ–ª–∞—Ç—å –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–ª—é—á–∞
	_, err := b.client.GetRRStatistics(apiKey, from, to, false, false, 0)
	if err != nil {
		// –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏, –Ω–æ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –µ—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –¥–∞–Ω–Ω—ã—Ö
		b.logger.Warn("API key validation request failed", zap.Error(err))
		
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
		errStr := err.Error()
		if strings.Contains(errStr, "status 401") || strings.Contains(errStr, "status 403") || strings.Contains(errStr, "unauthorized") || strings.Contains(errStr, "forbidden") {
			b.logger.Error("Failed to validate API key - unauthorized", zap.Error(err))
			b.sendMessage(chatID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á.")
			return
		}
		
		// –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –¥–∞–Ω–Ω—ã—Ö - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
		if strings.Contains(errStr, "format") || strings.Contains(errStr, "status 404") || strings.Contains(errStr, "no data") {
			b.logger.Info("API key validation - format issue or no data, but key seems valid", zap.Error(err))
		}
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º API –∫–ª—é—á
	user, exists := b.storage.GetUser(userID)
	if !exists {
		b.sendMessage(chatID, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
		return
	}

	user.APIKey = apiKey
	user.UpdatedAt = time.Now().Format(time.RFC3339)

	if err := b.storage.SaveUser(user); err != nil {
		b.logger.Error("Failed to save user with API key", zap.Error(err))
		b.sendMessage(chatID, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ API –∫–ª—é—á–∞.")
		return
	}

	b.sendMessage(chatID, "‚úÖ API –∫–ª—é—á —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å R-R –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã.")
}

// handleDisconnectCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /disconnect
func (b *Bot) handleDisconnectCommand(chatID, userID int64) {
	user, exists := b.storage.GetUser(userID)
	if !exists {
		b.sendMessage(chatID, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
		return
	}

	user.APIKey = ""
	user.UpdatedAt = time.Now().Format(time.RFC3339)

	if err := b.storage.SaveUser(user); err != nil {
		b.logger.Error("Failed to disconnect user", zap.Error(err))
		b.sendMessage(chatID, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏.")
		return
	}

	b.sendMessage(chatID, "‚úÖ API –∫–ª—é—á –æ—Ç–∫–ª—é—á–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /connect –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.")
}

// handleStatusCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /status
func (b *Bot) handleStatusCommand(chatID, userID int64) {
	user, exists := b.storage.GetUser(userID)
	if !exists {
		b.sendMessage(chatID, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
		return
	}

	status := "‚ùå –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω"
	if user.APIKey != "" {
		status = "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω"
	}

	message := fmt.Sprintf(`üìä –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: %s

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: %s %s
üÜî Telegram ID: %d
üìÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: %s
üîÑ –û–±–Ω–æ–≤–ª–µ–Ω: %s`,
		status,
		user.FirstName, user.LastName,
		user.TelegramID,
		user.CreatedAt,
		user.UpdatedAt,
	)

	b.sendMessage(chatID, message)
}

// handleHelpCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /help
func (b *Bot) handleHelpCommand(chatID int64) {
	message := `üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/connect API_KEY - –ü–æ–¥–∫–ª—é—á–∏—Ç—å API –∫–ª—é—á
/disconnect - –û—Ç–∫–ª—é—á–∏—Ç—å API –∫–ª—é—á
/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

üíì R-R –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã:
/rr [–¥–∞—Ç–∞_–Ω–∞—á–∞–ª–∞] [–¥–∞—Ç–∞_–∫–æ–Ω—Ü–∞] - –ü–æ–ª—É—á–∏—Ç—å R-R –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
/rrstats [–¥–∞—Ç–∞_–Ω–∞—á–∞–ª–∞] [–¥–∞—Ç–∞_–∫–æ–Ω—Ü–∞] - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ R-R –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤  
/rranalyze [–¥–∞—Ç–∞_–Ω–∞—á–∞–ª–∞] [–¥–∞—Ç–∞_–∫–æ–Ω—Ü–∞] - –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ R-R –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤

–ü—Ä–∏–º–µ—Ä—ã:
/rr 2024-01-01 2024-01-02
/rrstats 2024-01-01
/rranalyze 2024-01-01 2024-01-02

–§–æ—Ä–º–∞—Ç—ã –¥–∞—Ç:
- –ë–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤: —Å–µ–≥–æ–¥–Ω—è
- –û–¥–Ω–∞ –¥–∞—Ç–∞: –≤–µ—Å—å –¥–µ–Ω—å (2024-01-01)
- –î–≤–µ –¥–∞—Ç—ã: –¥–∏–∞–ø–∞–∑–æ–Ω (2024-01-01 2024-01-02)`

	b.sendMessage(chatID, message)
}

// handleRegularMessage –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
func (b *Bot) handleRegularMessage(message *tgbotapi.Message, user *storage.UserData) {
	chatID := message.Chat.ID
	text := strings.ToLower(strings.TrimSpace(message.Text))

	switch {
	case strings.Contains(text, "r-r") || strings.Contains(text, "rr –∏–Ω—Ç–µ—Ä–≤–∞–ª") || strings.Contains(text, "–≤–∞—Ä–∏–∞–±–µ–ª—å–Ω–æ—Å—Ç—å") || strings.Contains(text, "hrv"):
		b.sendMessage(chatID, `üíì *–†–∞–±–æ—Ç–∞ —Å R-R –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏:*

/rr - –ø–æ–ª—É—á–∏—Ç—å —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
/rrstats - –±–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ HRV
/rranalyze - –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–µ–π

–ü—Ä–∏–º–µ—Ä—ã:
/rr 2024-01-01 2024-01-02
/rrstats 2024-01-01
/rranalyze –≤—á–µ—Ä–∞ —Å–µ–≥–æ–¥–Ω—è`)
	case strings.Contains(text, "–ø–æ–º–æ—â—å") || strings.Contains(text, "help") || strings.Contains(text, "–∫–æ–º–∞–Ω–¥—ã"):
		b.handleHelpCommand(chatID)
	default:
		b.sendMessage(chatID, `‚ùì –ù–µ –ø–æ–Ω–∏–º–∞—é. 

–≠—Ç–æ—Ç –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å R-R –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏. 
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–º–∞–Ω–¥ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "r-r –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã" –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.`)
	}
}

// sendMessage –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
func (b *Bot) sendMessage(chatID int64, text string) {
	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = tgbotapi.ModeMarkdown

	if _, err := b.api.Send(msg); err != nil {
		b.logger.Error("Failed to send message", zap.Error(err))
	}
}
