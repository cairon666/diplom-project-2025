package bot

import (
	"fmt"
	"strings"
	"time"

	"go.uber.org/zap"
)

// handleRRIntervalsCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /rrintervals
func (b *Bot) handleRRIntervalsCommand(chatID, userID int64, args string) {
	user, exists := b.storage.GetUser(userID)
	if !exists || user.APIKey == "" {
		b.sendMessage(chatID, "‚ùå API –∫–ª—é—á –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /connect –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.")
		return
	}

	from, to, err := b.parseDateRange(args)
	if err != nil {
		b.sendMessage(chatID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /rr 2024-01-01 2024-01-02")
		return
	}

	response, err := b.client.GetRRIntervals(user.APIKey, from, to)
	if err != nil {
		b.logger.Error("Failed to get R-R intervals", zap.Error(err))
		b.sendMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ R-R –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ.")
		return
	}

	if len(response.RRIntervals) == 0 {
		b.sendMessage(chatID, "üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ R-R –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞—Ö –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.")
		return
	}

	message := fmt.Sprintf(`üíì *R-R –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã*
üìÖ –ü–µ—Ä–∏–æ–¥: %s - %s
üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: %d

–ü–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏–π:`,
		from.Format("02.01.2006"),
		to.Format("02.01.2006"),
		response.TotalCount,
	)

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –∑–Ω–∞—á–µ–Ω–∏–π
	count := len(response.RRIntervals)
	if count > 10 {
		count = 10
	}

	for i := 0; i < count; i++ {
		rr := response.RRIntervals[i]
		message += fmt.Sprintf("\n‚Ä¢ %d –º—Å (%s)", rr.RRValue, rr.Timestamp.Format("15:04:05"))
	}

	if len(response.RRIntervals) > 10 {
		message += fmt.Sprintf("\n... –∏ –µ—â–µ %d –∑–∞–ø–∏—Å–µ–π", len(response.RRIntervals)-10)
	}

	message += "\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /rrstats –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞."

	b.sendMessage(chatID, message)
}

// handleRRStatisticsCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /rrstats
func (b *Bot) handleRRStatisticsCommand(chatID, userID int64, args string) {
	user, exists := b.storage.GetUser(userID)
	if !exists || user.APIKey == "" {
		b.sendMessage(chatID, "‚ùå API –∫–ª—é—á –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /connect –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.")
		return
	}

	from, to, err := b.parseDateRange(args)
	if err != nil {
		b.sendMessage(chatID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /rrstats 2024-01-01 2024-01-02")
		return
	}

	response, err := b.client.GetRRStatistics(user.APIKey, from, to, true, true, 20)
	if err != nil {
		b.logger.Error("Failed to get R-R statistics", zap.Error(err))
		b.sendMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ R-R –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤.")
		return
	}

	if response.Summary == nil || response.Summary.Count == 0 {
		b.sendMessage(chatID, "üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ R-R –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞—Ö –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.")
		return
	}

	message := fmt.Sprintf(`üìà *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ R-R –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤*
üìÖ –ü–µ—Ä–∏–æ–¥: %s - %s

üìä *–û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:*
‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: %d –∏–∑–º–µ—Ä–µ–Ω–∏–π
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ: %.1f –º—Å
‚Ä¢ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: %.1f –º—Å
‚Ä¢ –ú–∏–Ω–∏–º—É–º: %d –º—Å
‚Ä¢ –ú–∞–∫—Å–∏–º—É–º: %d –º—Å`,
		from.Format("02.01.2006"),
		to.Format("02.01.2006"),
		response.Summary.Count,
		response.Summary.Mean,
		response.Summary.StdDev,
		response.Summary.Min,
		response.Summary.Max,
	)

	// –î–æ–±–∞–≤–ª—è–µ–º HRV –º–µ—Ç—Ä–∏–∫–∏ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
	if response.HRVMetrics != nil {
		message += fmt.Sprintf(`

üíì *HRV –ú–µ—Ç—Ä–∏–∫–∏:*
‚Ä¢ RMSSD: %.1f –º—Å
‚Ä¢ SDNN: %.1f –º—Å
‚Ä¢ pNN50: %.1f%%
‚Ä¢ –¢—Ä–µ—É–≥–æ–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å: %.1f
‚Ä¢ LF/HF: %.2f`,
			response.HRVMetrics.RMSSD,
			response.HRVMetrics.SDNN,
			response.HRVMetrics.PNN50,
			response.HRVMetrics.TriangularIndex,
			response.HRVMetrics.LFHFRatio,
		)
	}

	message += "\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /rranalyze –¥–ª—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞."

	b.sendMessage(chatID, message)
}

// handleRRAnalysisCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /rranalyze
func (b *Bot) handleRRAnalysisCommand(chatID, userID int64, args string) {
	user, exists := b.storage.GetUser(userID)
	if !exists || user.APIKey == "" {
		b.sendMessage(chatID, "‚ùå API –∫–ª—é—á –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /connect –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.")
		return
	}

	from, to, err := b.parseDateRange(args)
	if err != nil {
		b.sendMessage(chatID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /rranalyze 2024-01-01 2024-01-02")
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å –ø–æ–ª–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º
	statsResponse, err := b.client.GetRRStatistics(user.APIKey, from, to, true, true, 20)
	if err != nil {
		b.logger.Error("Failed to get R-R statistics", zap.Error(err))
		b.sendMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ R-R –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤.")
		return
	}

	if statsResponse.Summary == nil || statsResponse.Summary.Count == 0 {
		b.sendMessage(chatID, "üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ R-R –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞—Ö –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.")
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–∫–∞—Ç—Ç–µ—Ä–ø–ª–æ—Ç–∞
	scatterResponse, err := b.client.GetRRScatterplot(user.APIKey, from, to)
	if err != nil {
		b.logger.Warn("Failed to get scatterplot data", zap.Error(err))
	}

	message := fmt.Sprintf(`üî¨ *–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ R-R –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤*
üìÖ –ü–µ—Ä–∏–æ–¥: %s - %s

üìä *–û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*
‚Ä¢ –ò–∑–º–µ—Ä–µ–Ω–∏–π: %d
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ: %.1f –º—Å (%.1f BPM)
‚Ä¢ –í–∞—Ä–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç—å: %.1f –º—Å
‚Ä¢ –î–∏–∞–ø–∞–∑–æ–Ω: %d - %d –º—Å`,
		from.Format("02.01.2006"),
		to.Format("02.01.2006"),
		statsResponse.Summary.Count,
		statsResponse.Summary.Mean,
		60000/statsResponse.Summary.Mean, // –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ BPM
		statsResponse.Summary.StdDev,
		statsResponse.Summary.Min,
		statsResponse.Summary.Max,
	)

	// HRV –∞–Ω–∞–ª–∏–∑
	if statsResponse.HRVMetrics != nil {
		hrv := statsResponse.HRVMetrics
		message += fmt.Sprintf(`

üíó *–ê–Ω–∞–ª–∏–∑ –≤–∞—Ä–∏–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—É–ª—å—Å–∞ (HRV):*

üî∏ *–í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:*
‚Ä¢ RMSSD: %.1f –º—Å (–∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–∞—è –≤–∞—Ä–∏–∞–±–µ–ª—å–Ω–æ—Å—Ç—å)
‚Ä¢ SDNN: %.1f –º—Å (–æ–±—â–∞—è –≤–∞—Ä–∏–∞–±–µ–ª—å–Ω–æ—Å—Ç—å)
‚Ä¢ pNN50: %.1f%% (–ø–∞—Ä–∞—Å–∏–º–ø–∞—Ç–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å)

üî∏ *–ì–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:*
‚Ä¢ –¢—Ä–µ—É–≥–æ–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å: %.1f
‚Ä¢ TINN: %.1f –º—Å

üî∏ *–ß–∞—Å—Ç–æ—Ç–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:*
‚Ä¢ VLF: %.1f –º—Å¬≤ (–æ—á–µ–Ω—å –Ω–∏–∑–∫–∏–µ —á–∞—Å—Ç–æ—Ç—ã)
‚Ä¢ LF: %.1f –º—Å¬≤ (–Ω–∏–∑–∫–∏–µ —á–∞—Å—Ç–æ—Ç—ã)
‚Ä¢ HF: %.1f –º—Å¬≤ (–≤—ã—Å–æ–∫–∏–µ —á–∞—Å—Ç–æ—Ç—ã)
‚Ä¢ LF/HF: %.2f (—Å–∏–º–ø–∞—Ç–æ/–ø–∞—Ä–∞—Å–∏–º–ø–∞—Ç–∏—á–µ—Å–∫–∏–π –±–∞–ª–∞–Ω—Å)
‚Ä¢ –û–±—â–∞—è –º–æ—â–Ω–æ—Å—Ç—å: %.1f –º—Å¬≤`,
			hrv.RMSSD,
			hrv.SDNN,
			hrv.PNN50,
			hrv.TriangularIndex,
			hrv.TINN,
			hrv.VLFPower,
			hrv.LFPower,
			hrv.HFPower,
			hrv.LFHFRatio,
			hrv.TotalPower,
		)

		// –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
		message += "\n\nü©∫ *–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è:*"
		
		if hrv.RMSSD < 20 {
			message += "\n‚Ä¢ ‚ö†Ô∏è –ù–∏–∑–∫–∞—è –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–∞—è –≤–∞—Ä–∏–∞–±–µ–ª—å–Ω–æ—Å—Ç—å"
		} else if hrv.RMSSD > 50 {
			message += "\n‚Ä¢ ‚úÖ –í—ã—Å–æ–∫–∞—è –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–∞—è –≤–∞—Ä–∏–∞–±–µ–ª—å–Ω–æ—Å—Ç—å"
		} else {
			message += "\n‚Ä¢ ‚úÖ –ù–æ—Ä–º–∞–ª—å–Ω–∞—è –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–∞—è –≤–∞—Ä–∏–∞–±–µ–ª—å–Ω–æ—Å—Ç—å"
		}

		if hrv.LFHFRatio > 2.5 {
			message += "\n‚Ä¢ ‚ö†Ô∏è –ü–æ–≤—ã—à–µ–Ω–Ω—ã–π —Å–∏–º–ø–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç–æ–Ω—É—Å (—Å—Ç—Ä–µ—Å—Å)"
		} else if hrv.LFHFRatio < 1.5 {
			message += "\n‚Ä¢ ‚úÖ –•–æ—Ä–æ—à–∏–π –ø–∞—Ä–∞—Å–∏–º–ø–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç–æ–Ω—É—Å (–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ)"
		} else {
			message += "\n‚Ä¢ ‚úÖ –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ù–°"
		}
	}

	// –ê–Ω–∞–ª–∏–∑ —Å–∫–∞—Ç—Ç–µ—Ä–ø–ª–æ—Ç–∞
	if scatterResponse != nil && scatterResponse.Statistics != nil {
		stats := scatterResponse.Statistics
		message += fmt.Sprintf(`

üìä *–ê–Ω–∞–ª–∏–∑ –¥–∏–∞–≥—Ä–∞–º–º—ã –ü—É–∞–Ω–∫–∞—Ä–µ:*
‚Ä¢ SD1: %.1f –º—Å (–±—ã—Å—Ç—Ä–∞—è –∏–∑–º–µ–Ω—á–∏–≤–æ—Å—Ç—å)
‚Ä¢ SD2: %.1f –º—Å (–º–µ–¥–ª–µ–Ω–Ω–∞—è –∏–∑–º–µ–Ω—á–∏–≤–æ—Å—Ç—å) 
‚Ä¢ SD1/SD2: %.2f (—Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ)
‚Ä¢ CSI: %.1f (–∏–Ω–¥–µ–∫—Å —Å–µ—Ä–¥–µ—á–Ω–æ–≥–æ —Å—Ç—Ä–µ—Å—Å–∞)
‚Ä¢ CVI: %.1f (–∏–Ω–¥–µ–∫—Å —Å–µ—Ä–¥–µ—á–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏)`,
			stats.SD1,
			stats.SD2,
			stats.SD1SD2Ratio,
			stats.CSI,
			stats.CVI,
		)
	}

	// –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞
	if statsResponse.Histogram != nil && len(statsResponse.Histogram.Bins) > 0 {
		message += "\n\nüìà *–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ R-R –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤:*"
		// –ù–∞—Ö–æ–¥–∏–º –ø–∏–∫ –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã
		maxCount := int64(0)
		peakBin := statsResponse.Histogram.Bins[0]
		for _, bin := range statsResponse.Histogram.Bins {
			if bin.Count > maxCount {
				maxCount = bin.Count
				peakBin = bin
			}
		}
		message += fmt.Sprintf("\n‚Ä¢ –ü–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è: %d-%d –º—Å (%.1f%%)",
			peakBin.RangeStart, peakBin.RangeEnd, peakBin.Frequency*100)
	}

	b.sendMessage(chatID, message)
}

// parseDateRange –ø–∞—Ä—Å–∏—Ç –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
func (b *Bot) parseDateRange(args string) (time.Time, time.Time, error) {
	args = strings.TrimSpace(args)
	
	// –ï—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –ø—É—Å—Ç—ã–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å
	if args == "" {
		now := time.Now()
		start := time.Date(now.Year(), now.Month(), now.Day(), 0, 0, 0, 0, now.Location())
		end := time.Date(now.Year(), now.Month(), now.Day(), 23, 59, 59, 0, now.Location())
		return start, end, nil
	}

	parts := strings.Fields(args)
	
	// –ï—Å–ª–∏ –æ–¥–Ω–∞ –¥–∞—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë –∫–∞–∫ –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü –¥–Ω—è
	if len(parts) == 1 {
		date, err := time.Parse("2006-01-02", parts[0])
		if err != nil {
			return time.Time{}, time.Time{}, err
		}
		start := time.Date(date.Year(), date.Month(), date.Day(), 0, 0, 0, 0, date.Location())
		end := time.Date(date.Year(), date.Month(), date.Day(), 23, 59, 59, 0, date.Location())
		return start, end, nil
	}

	// –ï—Å–ª–∏ –¥–≤–µ –¥–∞—Ç—ã
	if len(parts) == 2 {
		from, err := time.Parse("2006-01-02", parts[0])
		if err != nil {
			return time.Time{}, time.Time{}, err
		}
		to, err := time.Parse("2006-01-02", parts[1])
		if err != nil {
			return time.Time{}, time.Time{}, err
		}
		
		// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –¥–Ω—è –¥–ª—è from –∏ –∫–æ–Ω—Ü–∞ –¥–Ω—è –¥–ª—è to
		start := time.Date(from.Year(), from.Month(), from.Day(), 0, 0, 0, 0, from.Location())
		end := time.Date(to.Year(), to.Month(), to.Day(), 23, 59, 59, 0, to.Location())
		
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ø–æ—Ä—è–¥–∫–∞ –¥–∞—Ç
		if start.After(end) {
			start, end = end, start
		}
		
		return start, end, nil
	}

	return time.Time{}, time.Time{}, fmt.Errorf("–Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤")
} 