// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: external_apps.sql

package dbqueries

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createExternalApp = `-- name: CreateExternalApp :one
INSERT INTO "EXTERNAL_APPS" (id, name, owner_user_id, api_key_hash, created_at)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, name, owner_user_id, api_key_hash, created_at
`

type CreateExternalAppParams struct {
	ID          uuid.UUID
	Name        string
	OwnerUserID uuid.UUID
	ApiKeyHash  string
	CreatedAt   time.Time
}

func (q *Queries) CreateExternalApp(ctx context.Context, arg CreateExternalAppParams) (EXTERNALAPP, error) {
	row := q.db.QueryRow(ctx, createExternalApp,
		arg.ID,
		arg.Name,
		arg.OwnerUserID,
		arg.ApiKeyHash,
		arg.CreatedAt,
	)
	var i EXTERNALAPP
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.OwnerUserID,
		&i.ApiKeyHash,
		&i.CreatedAt,
	)
	return i, err
}

const deleteExternalApp = `-- name: DeleteExternalApp :one
DELETE FROM "EXTERNAL_APPS"
WHERE id = $1
RETURNING id
`

func (q *Queries) DeleteExternalApp(ctx context.Context, id uuid.UUID) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, deleteExternalApp, id)
	err := row.Scan(&id)
	return id, err
}

const getExternalAppByAPIKeyHash = `-- name: GetExternalAppByAPIKeyHash :one
SELECT id, name, owner_user_id, api_key_hash, created_at FROM "EXTERNAL_APPS"
WHERE api_key_hash = $1
`

func (q *Queries) GetExternalAppByAPIKeyHash(ctx context.Context, apiKeyHash string) (EXTERNALAPP, error) {
	row := q.db.QueryRow(ctx, getExternalAppByAPIKeyHash, apiKeyHash)
	var i EXTERNALAPP
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.OwnerUserID,
		&i.ApiKeyHash,
		&i.CreatedAt,
	)
	return i, err
}

const getExternalAppByID = `-- name: GetExternalAppByID :one
SELECT id, name, owner_user_id, api_key_hash, created_at FROM "EXTERNAL_APPS"
WHERE id = $1
`

func (q *Queries) GetExternalAppByID(ctx context.Context, id uuid.UUID) (EXTERNALAPP, error) {
	row := q.db.QueryRow(ctx, getExternalAppByID, id)
	var i EXTERNALAPP
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.OwnerUserID,
		&i.ApiKeyHash,
		&i.CreatedAt,
	)
	return i, err
}

const listExternalAppsByOwner = `-- name: ListExternalAppsByOwner :many
SELECT id, name, owner_user_id, api_key_hash, created_at FROM "EXTERNAL_APPS"
WHERE owner_user_id = $1
ORDER BY created_at DESC
`

func (q *Queries) ListExternalAppsByOwner(ctx context.Context, ownerUserID uuid.UUID) ([]EXTERNALAPP, error) {
	rows, err := q.db.Query(ctx, listExternalAppsByOwner, ownerUserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []EXTERNALAPP
	for rows.Next() {
		var i EXTERNALAPP
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.OwnerUserID,
			&i.ApiKeyHash,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateExternalAppName = `-- name: UpdateExternalAppName :exec
UPDATE "EXTERNAL_APPS"
SET name = $2
WHERE id = $1
`

type UpdateExternalAppNameParams struct {
	ID   uuid.UUID
	Name string
}

func (q *Queries) UpdateExternalAppName(ctx context.Context, arg UpdateExternalAppNameParams) error {
	_, err := q.db.Exec(ctx, updateExternalAppName, arg.ID, arg.Name)
	return err
}
