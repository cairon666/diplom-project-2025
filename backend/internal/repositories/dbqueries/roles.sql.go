// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: roles.sql

package dbqueries

import (
	"context"

	"github.com/google/uuid"
)

const getPermissionsByRoleIDs = `-- name: GetPermissionsByRoleIDs :many
SELECT p.id, p.name
FROM "ROLE_PERMISSIONS" rp
         JOIN "PERMISSIONS" p ON rp.permission_id = p.id
WHERE rp.role_id = ANY($1::int[])
`

func (q *Queries) GetPermissionsByRoleIDs(ctx context.Context, dollar_1 []int32) ([]PERMISSION, error) {
	rows, err := q.db.Query(ctx, getPermissionsByRoleIDs, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PERMISSION
	for rows.Next() {
		var i PERMISSION
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRoleByName = `-- name: GetRoleByName :one
SELECT id, name FROM "ROLES" WHERE name = $1
`

func (q *Queries) GetRoleByName(ctx context.Context, name string) (ROLE, error) {
	row := q.db.QueryRow(ctx, getRoleByName, name)
	var i ROLE
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getRolesByUserID = `-- name: GetRolesByUserID :many
SELECT r.id, r.name
FROM "USER_ROLES" ur
         JOIN "ROLES" r ON ur.role_id = r.id
WHERE ur.user_id = $1
`

func (q *Queries) GetRolesByUserID(ctx context.Context, userID uuid.UUID) ([]ROLE, error) {
	rows, err := q.db.Query(ctx, getRolesByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ROLE
	for rows.Next() {
		var i ROLE
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
