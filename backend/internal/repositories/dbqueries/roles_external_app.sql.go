// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: roles_external_app.sql

package dbqueries

import (
	"context"

	"github.com/google/uuid"
)

const addRoleToExternalApp = `-- name: AddRoleToExternalApp :exec
INSERT INTO "EXTERNAL_APPS_ROLES" (external_app_id, role_id)
VALUES ($1, $2)
ON CONFLICT DO NOTHING
`

type AddRoleToExternalAppParams struct {
	ExternalAppID uuid.UUID
	RoleID        int32
}

func (q *Queries) AddRoleToExternalApp(ctx context.Context, arg AddRoleToExternalAppParams) error {
	_, err := q.db.Exec(ctx, addRoleToExternalApp, arg.ExternalAppID, arg.RoleID)
	return err
}

const externalAppHasRole = `-- name: ExternalAppHasRole :one
SELECT EXISTS (
    SELECT 1 FROM "EXTERNAL_APPS_ROLES"
    WHERE external_app_id = $1 AND role_id = $2
) AS exists
`

type ExternalAppHasRoleParams struct {
	ExternalAppID uuid.UUID
	RoleID        int32
}

func (q *Queries) ExternalAppHasRole(ctx context.Context, arg ExternalAppHasRoleParams) (bool, error) {
	row := q.db.QueryRow(ctx, externalAppHasRole, arg.ExternalAppID, arg.RoleID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const getPermissionsByExternalAppID = `-- name: GetPermissionsByExternalAppID :many
SELECT p.id, p.name
FROM "PERMISSIONS" p
         JOIN "ROLE_PERMISSIONS" rp ON p.id = rp.permission_id
         JOIN "EXTERNAL_APPS_ROLES" ear ON rp.role_id = ear.role_id
WHERE ear.external_app_id = $1
`

func (q *Queries) GetPermissionsByExternalAppID(ctx context.Context, externalAppID uuid.UUID) ([]PERMISSION, error) {
	rows, err := q.db.Query(ctx, getPermissionsByExternalAppID, externalAppID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PERMISSION
	for rows.Next() {
		var i PERMISSION
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRolesByExternalAppID = `-- name: GetRolesByExternalAppID :many
SELECT r.id, r.name
FROM "ROLES" r
         JOIN "EXTERNAL_APPS_ROLES" ear ON r.id = ear.role_id
WHERE ear.external_app_id = $1
`

func (q *Queries) GetRolesByExternalAppID(ctx context.Context, externalAppID uuid.UUID) ([]ROLE, error) {
	rows, err := q.db.Query(ctx, getRolesByExternalAppID, externalAppID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ROLE
	for rows.Next() {
		var i ROLE
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeRoleFromExternalApp = `-- name: RemoveRoleFromExternalApp :exec
DELETE FROM "EXTERNAL_APPS_ROLES"
WHERE external_app_id = $1 AND role_id = $2
`

type RemoveRoleFromExternalAppParams struct {
	ExternalAppID uuid.UUID
	RoleID        int32
}

func (q *Queries) RemoveRoleFromExternalApp(ctx context.Context, arg RemoveRoleFromExternalAppParams) error {
	_, err := q.db.Exec(ctx, removeRoleFromExternalApp, arg.ExternalAppID, arg.RoleID)
	return err
}
