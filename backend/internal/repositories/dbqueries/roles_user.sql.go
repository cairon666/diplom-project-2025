// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: roles_user.sql

package dbqueries

import (
	"context"

	"github.com/google/uuid"
)

const assignRoleToUser = `-- name: AssignRoleToUser :exec
INSERT INTO "USER_ROLES" (user_id, role_id)
VALUES ($1, $2)
ON CONFLICT DO NOTHING
`

type AssignRoleToUserParams struct {
	UserID uuid.UUID
	RoleID int32
}

func (q *Queries) AssignRoleToUser(ctx context.Context, arg AssignRoleToUserParams) error {
	_, err := q.db.Exec(ctx, assignRoleToUser, arg.UserID, arg.RoleID)
	return err
}

const getPermissionsByUserID = `-- name: GetPermissionsByUserID :many
SELECT DISTINCT p.id, p.name
FROM "USER_ROLES" ur
         JOIN "ROLE_PERMISSIONS" rp ON ur.role_id = rp.role_id
         JOIN "PERMISSIONS" p ON rp.permission_id = p.id
WHERE ur.user_id = $1
`

func (q *Queries) GetPermissionsByUserID(ctx context.Context, userID uuid.UUID) ([]PERMISSION, error) {
	rows, err := q.db.Query(ctx, getPermissionsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PERMISSION
	for rows.Next() {
		var i PERMISSION
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const hasUserPermission = `-- name: HasUserPermission :one
SELECT EXISTS (
    SELECT 1
    FROM "USER_ROLES" ur
             JOIN "ROLE_PERMISSIONS" rp ON ur.role_id = rp.role_id
             JOIN "PERMISSIONS" p ON rp.permission_id = p.id
    WHERE ur.user_id = $1
      AND p.name = $2
) AS has_permission
`

type HasUserPermissionParams struct {
	UserID uuid.UUID
	Name   string
}

func (q *Queries) HasUserPermission(ctx context.Context, arg HasUserPermissionParams) (bool, error) {
	row := q.db.QueryRow(ctx, hasUserPermission, arg.UserID, arg.Name)
	var has_permission bool
	err := row.Scan(&has_permission)
	return has_permission, err
}

const removeRoleFromUser = `-- name: RemoveRoleFromUser :exec
DELETE FROM "USER_ROLES" WHERE user_id = $1 AND role_id = $2
`

type RemoveRoleFromUserParams struct {
	UserID uuid.UUID
	RoleID int32
}

func (q *Queries) RemoveRoleFromUser(ctx context.Context, arg RemoveRoleFromUserParams) error {
	_, err := q.db.Exec(ctx, removeRoleFromUser, arg.UserID, arg.RoleID)
	return err
}
