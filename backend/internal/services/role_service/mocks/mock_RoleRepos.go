// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/cairon666/vkr-backend/internal/models"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockRoleRepos is an autogenerated mock type for the RoleRepos type
type MockRoleRepos struct {
	mock.Mock
}

type MockRoleRepos_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRoleRepos) EXPECT() *MockRoleRepos_Expecter {
	return &MockRoleRepos_Expecter{mock: &_m.Mock}
}

// AssignRoleToExternalApp provides a mock function with given fields: ctx, externalID, roleID
func (_m *MockRoleRepos) AssignRoleToExternalApp(ctx context.Context, externalID uuid.UUID, roleID int32) error {
	ret := _m.Called(ctx, externalID, roleID)

	if len(ret) == 0 {
		panic("no return value specified for AssignRoleToExternalApp")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, int32) error); ok {
		r0 = rf(ctx, externalID, roleID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRoleRepos_AssignRoleToExternalApp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AssignRoleToExternalApp'
type MockRoleRepos_AssignRoleToExternalApp_Call struct {
	*mock.Call
}

// AssignRoleToExternalApp is a helper method to define mock.On call
//   - ctx context.Context
//   - externalID uuid.UUID
//   - roleID int32
func (_e *MockRoleRepos_Expecter) AssignRoleToExternalApp(ctx interface{}, externalID interface{}, roleID interface{}) *MockRoleRepos_AssignRoleToExternalApp_Call {
	return &MockRoleRepos_AssignRoleToExternalApp_Call{Call: _e.mock.On("AssignRoleToExternalApp", ctx, externalID, roleID)}
}

func (_c *MockRoleRepos_AssignRoleToExternalApp_Call) Run(run func(ctx context.Context, externalID uuid.UUID, roleID int32)) *MockRoleRepos_AssignRoleToExternalApp_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(int32))
	})
	return _c
}

func (_c *MockRoleRepos_AssignRoleToExternalApp_Call) Return(_a0 error) *MockRoleRepos_AssignRoleToExternalApp_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRoleRepos_AssignRoleToExternalApp_Call) RunAndReturn(run func(context.Context, uuid.UUID, int32) error) *MockRoleRepos_AssignRoleToExternalApp_Call {
	_c.Call.Return(run)
	return _c
}

// AssignRoleToUser provides a mock function with given fields: ctx, userID, roleID
func (_m *MockRoleRepos) AssignRoleToUser(ctx context.Context, userID uuid.UUID, roleID int32) error {
	ret := _m.Called(ctx, userID, roleID)

	if len(ret) == 0 {
		panic("no return value specified for AssignRoleToUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, int32) error); ok {
		r0 = rf(ctx, userID, roleID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRoleRepos_AssignRoleToUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AssignRoleToUser'
type MockRoleRepos_AssignRoleToUser_Call struct {
	*mock.Call
}

// AssignRoleToUser is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
//   - roleID int32
func (_e *MockRoleRepos_Expecter) AssignRoleToUser(ctx interface{}, userID interface{}, roleID interface{}) *MockRoleRepos_AssignRoleToUser_Call {
	return &MockRoleRepos_AssignRoleToUser_Call{Call: _e.mock.On("AssignRoleToUser", ctx, userID, roleID)}
}

func (_c *MockRoleRepos_AssignRoleToUser_Call) Run(run func(ctx context.Context, userID uuid.UUID, roleID int32)) *MockRoleRepos_AssignRoleToUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(int32))
	})
	return _c
}

func (_c *MockRoleRepos_AssignRoleToUser_Call) Return(_a0 error) *MockRoleRepos_AssignRoleToUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRoleRepos_AssignRoleToUser_Call) RunAndReturn(run func(context.Context, uuid.UUID, int32) error) *MockRoleRepos_AssignRoleToUser_Call {
	_c.Call.Return(run)
	return _c
}

// AssignRolesToExternalApp provides a mock function with given fields: ctx, externalID, roleIDs
func (_m *MockRoleRepos) AssignRolesToExternalApp(ctx context.Context, externalID uuid.UUID, roleIDs []int32) error {
	ret := _m.Called(ctx, externalID, roleIDs)

	if len(ret) == 0 {
		panic("no return value specified for AssignRolesToExternalApp")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, []int32) error); ok {
		r0 = rf(ctx, externalID, roleIDs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRoleRepos_AssignRolesToExternalApp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AssignRolesToExternalApp'
type MockRoleRepos_AssignRolesToExternalApp_Call struct {
	*mock.Call
}

// AssignRolesToExternalApp is a helper method to define mock.On call
//   - ctx context.Context
//   - externalID uuid.UUID
//   - roleIDs []int32
func (_e *MockRoleRepos_Expecter) AssignRolesToExternalApp(ctx interface{}, externalID interface{}, roleIDs interface{}) *MockRoleRepos_AssignRolesToExternalApp_Call {
	return &MockRoleRepos_AssignRolesToExternalApp_Call{Call: _e.mock.On("AssignRolesToExternalApp", ctx, externalID, roleIDs)}
}

func (_c *MockRoleRepos_AssignRolesToExternalApp_Call) Run(run func(ctx context.Context, externalID uuid.UUID, roleIDs []int32)) *MockRoleRepos_AssignRolesToExternalApp_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].([]int32))
	})
	return _c
}

func (_c *MockRoleRepos_AssignRolesToExternalApp_Call) Return(_a0 error) *MockRoleRepos_AssignRolesToExternalApp_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRoleRepos_AssignRolesToExternalApp_Call) RunAndReturn(run func(context.Context, uuid.UUID, []int32) error) *MockRoleRepos_AssignRolesToExternalApp_Call {
	_c.Call.Return(run)
	return _c
}

// GetPermissionsByExternalAppID provides a mock function with given fields: ctx, externalID
func (_m *MockRoleRepos) GetPermissionsByExternalAppID(ctx context.Context, externalID uuid.UUID) ([]models.Permission, error) {
	ret := _m.Called(ctx, externalID)

	if len(ret) == 0 {
		panic("no return value specified for GetPermissionsByExternalAppID")
	}

	var r0 []models.Permission
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]models.Permission, error)); ok {
		return rf(ctx, externalID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []models.Permission); ok {
		r0 = rf(ctx, externalID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Permission)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, externalID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRoleRepos_GetPermissionsByExternalAppID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPermissionsByExternalAppID'
type MockRoleRepos_GetPermissionsByExternalAppID_Call struct {
	*mock.Call
}

// GetPermissionsByExternalAppID is a helper method to define mock.On call
//   - ctx context.Context
//   - externalID uuid.UUID
func (_e *MockRoleRepos_Expecter) GetPermissionsByExternalAppID(ctx interface{}, externalID interface{}) *MockRoleRepos_GetPermissionsByExternalAppID_Call {
	return &MockRoleRepos_GetPermissionsByExternalAppID_Call{Call: _e.mock.On("GetPermissionsByExternalAppID", ctx, externalID)}
}

func (_c *MockRoleRepos_GetPermissionsByExternalAppID_Call) Run(run func(ctx context.Context, externalID uuid.UUID)) *MockRoleRepos_GetPermissionsByExternalAppID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockRoleRepos_GetPermissionsByExternalAppID_Call) Return(_a0 []models.Permission, _a1 error) *MockRoleRepos_GetPermissionsByExternalAppID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRoleRepos_GetPermissionsByExternalAppID_Call) RunAndReturn(run func(context.Context, uuid.UUID) ([]models.Permission, error)) *MockRoleRepos_GetPermissionsByExternalAppID_Call {
	_c.Call.Return(run)
	return _c
}

// GetPermissionsByUserID provides a mock function with given fields: ctx, userID
func (_m *MockRoleRepos) GetPermissionsByUserID(ctx context.Context, userID uuid.UUID) ([]models.Permission, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetPermissionsByUserID")
	}

	var r0 []models.Permission
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]models.Permission, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []models.Permission); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Permission)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRoleRepos_GetPermissionsByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPermissionsByUserID'
type MockRoleRepos_GetPermissionsByUserID_Call struct {
	*mock.Call
}

// GetPermissionsByUserID is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
func (_e *MockRoleRepos_Expecter) GetPermissionsByUserID(ctx interface{}, userID interface{}) *MockRoleRepos_GetPermissionsByUserID_Call {
	return &MockRoleRepos_GetPermissionsByUserID_Call{Call: _e.mock.On("GetPermissionsByUserID", ctx, userID)}
}

func (_c *MockRoleRepos_GetPermissionsByUserID_Call) Run(run func(ctx context.Context, userID uuid.UUID)) *MockRoleRepos_GetPermissionsByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockRoleRepos_GetPermissionsByUserID_Call) Return(_a0 []models.Permission, _a1 error) *MockRoleRepos_GetPermissionsByUserID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRoleRepos_GetPermissionsByUserID_Call) RunAndReturn(run func(context.Context, uuid.UUID) ([]models.Permission, error)) *MockRoleRepos_GetPermissionsByUserID_Call {
	_c.Call.Return(run)
	return _c
}

// GetRoleByName provides a mock function with given fields: ctx, name
func (_m *MockRoleRepos) GetRoleByName(ctx context.Context, name string) (models.Role, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetRoleByName")
	}

	var r0 models.Role
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (models.Role, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) models.Role); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(models.Role)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRoleRepos_GetRoleByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRoleByName'
type MockRoleRepos_GetRoleByName_Call struct {
	*mock.Call
}

// GetRoleByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockRoleRepos_Expecter) GetRoleByName(ctx interface{}, name interface{}) *MockRoleRepos_GetRoleByName_Call {
	return &MockRoleRepos_GetRoleByName_Call{Call: _e.mock.On("GetRoleByName", ctx, name)}
}

func (_c *MockRoleRepos_GetRoleByName_Call) Run(run func(ctx context.Context, name string)) *MockRoleRepos_GetRoleByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockRoleRepos_GetRoleByName_Call) Return(_a0 models.Role, _a1 error) *MockRoleRepos_GetRoleByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRoleRepos_GetRoleByName_Call) RunAndReturn(run func(context.Context, string) (models.Role, error)) *MockRoleRepos_GetRoleByName_Call {
	_c.Call.Return(run)
	return _c
}

// GetRolesByExternalAppID provides a mock function with given fields: ctx, externalID
func (_m *MockRoleRepos) GetRolesByExternalAppID(ctx context.Context, externalID uuid.UUID) ([]models.Role, error) {
	ret := _m.Called(ctx, externalID)

	if len(ret) == 0 {
		panic("no return value specified for GetRolesByExternalAppID")
	}

	var r0 []models.Role
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]models.Role, error)); ok {
		return rf(ctx, externalID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []models.Role); ok {
		r0 = rf(ctx, externalID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Role)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, externalID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRoleRepos_GetRolesByExternalAppID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRolesByExternalAppID'
type MockRoleRepos_GetRolesByExternalAppID_Call struct {
	*mock.Call
}

// GetRolesByExternalAppID is a helper method to define mock.On call
//   - ctx context.Context
//   - externalID uuid.UUID
func (_e *MockRoleRepos_Expecter) GetRolesByExternalAppID(ctx interface{}, externalID interface{}) *MockRoleRepos_GetRolesByExternalAppID_Call {
	return &MockRoleRepos_GetRolesByExternalAppID_Call{Call: _e.mock.On("GetRolesByExternalAppID", ctx, externalID)}
}

func (_c *MockRoleRepos_GetRolesByExternalAppID_Call) Run(run func(ctx context.Context, externalID uuid.UUID)) *MockRoleRepos_GetRolesByExternalAppID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockRoleRepos_GetRolesByExternalAppID_Call) Return(_a0 []models.Role, _a1 error) *MockRoleRepos_GetRolesByExternalAppID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRoleRepos_GetRolesByExternalAppID_Call) RunAndReturn(run func(context.Context, uuid.UUID) ([]models.Role, error)) *MockRoleRepos_GetRolesByExternalAppID_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRoleRepos creates a new instance of MockRoleRepos. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRoleRepos(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRoleRepos {
	mock := &MockRoleRepos{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
