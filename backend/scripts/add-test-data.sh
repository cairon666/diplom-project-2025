#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö R-R –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –≤ InfluxDB

set -e

echo "üíì –î–æ–±–∞–≤–ª–µ–Ω–∏–µ R-R –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –≤ InfluxDB..."

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç config/config.local.yaml)
INFLUX_URL="http://localhost:8086"
INFLUX_TOKEN="dev-token-for-local-development-only"
INFLUX_ORG="health-analytics"
INFLUX_BUCKET="health-data"

# –¢–µ—Å—Ç–æ–≤—ã–µ UUID
USER_ID="b14adb16-5a49-4d8e-a97b-e006415ec126"
DEVICE_ID="fa9e1b6d-a593-469e-b174-f5c81028d3c9"

echo "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: $USER_ID"
echo "üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ ID: $DEVICE_ID"
echo ""

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –û–° –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥ date
OS_TYPE=$(uname -s)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞—Ç–∞–º–∏ –∏ –≤—Ä–µ–º–µ–Ω–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –û–°
date_with_time() {
    local days=$1
    local hour=$2
    local minute=${3:-0}
    local second=${4:-0}
    
    if [ "$OS_TYPE" = "Darwin" ]; then
        # macOS
        local base_date=$(date -v-${days}d '+%Y-%m-%d')
        date -j -f '%Y-%m-%d %H:%M:%S' "${base_date} ${hour}:${minute}:${second}" '+%s'
    else
        # Linux
        date -d "${days} days ago ${hour}:${minute}:${second}" '+%s'
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ UUID v4
generate_uuid() {
    if command -v python3 &> /dev/null; then
        python3 -c "import uuid; print(str(uuid.uuid4()))"
    elif command -v uuidgen &> /dev/null; then
        uuidgen | tr '[:upper:]' '[:lower:]'
    else
        # Fallback –¥–ª—è —Å–∏—Å—Ç–µ–º –±–µ–∑ python3 –∏ uuidgen
        echo "$(od -x /dev/urandom | head -1 | awk '{OFS="-"; print $2$3,$4,$5,$6,$7$8$9}')"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ R-R –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
generate_rr_interval() {
    local hour=$1
    local base_rr
    local variation
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—ã–π R-R –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫
    if [ $hour -ge 0 ] && [ $hour -le 6 ]; then
        # –ù–æ—á—å/—Ä–∞–Ω–Ω–µ–µ —É—Ç—Ä–æ: –º–µ–¥–ª–µ–Ω–Ω—ã–π –ø—É–ª—å—Å, –¥–ª–∏–Ω–Ω—ã–µ R-R –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
        base_rr=1100  # ~55 BPM
        variation=200
    elif [ $hour -ge 7 ] && [ $hour -le 9 ]; then
        # –£—Ç—Ä–µ–Ω–Ω–µ–µ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ: —É–º–µ—Ä–µ–Ω–Ω—ã–π –ø—É–ª—å—Å
        base_rr=900   # ~67 BPM
        variation=150
    elif [ $hour -ge 10 ] && [ $hour -le 12 ]; then
        # –£—Ç—Ä–µ–Ω–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: –Ω–µ–º–Ω–æ–≥–æ –±—ã—Å—Ç—Ä–µ–µ
        base_rr=800   # ~75 BPM
        variation=100
    elif [ $hour -ge 13 ] && [ $hour -le 17 ]; then
        # –î–Ω–µ–≤–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: –º–æ–∂–µ—Ç –±—ã—Ç—å —Ñ–∏–∑–∏—á–µ—Å–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞
        base_rr=750   # ~80 BPM
        variation=150
    elif [ $hour -ge 18 ] && [ $hour -le 21 ]; then
        # –í–µ—á–µ—Ä: —É–º–µ—Ä–µ–Ω–Ω—ã–π
        base_rr=850   # ~71 BPM
        variation=120
    else
        # –ü–æ–∑–¥–Ω–∏–π –≤–µ—á–µ—Ä: –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ —Å–Ω—É
        base_rr=950   # ~63 BPM
        variation=100
    fi
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—É—é –≤–∞—Ä–∏–∞—Ü–∏—é
    local random_offset=$((RANDOM % (variation * 2) - variation))
    local rr_interval=$((base_rr + random_offset))
    
    # –ò–Ω–æ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º "—Å–æ–±—ã—Ç–∏—è" –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
    local event_chance=$((RANDOM % 100))
    if [ $event_chance -lt 5 ]; then
        # 5% —à–∞–Ω—Å –Ω–∞ —ç–∫—Å—Ç—Ä–∞—Å–∏—Å—Ç–æ–ª—É (–∫–æ—Ä–æ—Ç–∫–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª)
        rr_interval=$((rr_interval - 200 - RANDOM % 300))
    elif [ $event_chance -lt 10 ]; then
        # 5% —à–∞–Ω—Å –Ω–∞ –∫–æ–º–ø–µ–Ω—Å–∞—Ç–æ—Ä–Ω—É—é –ø–∞—É–∑—É (–¥–ª–∏–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª)
        rr_interval=$((rr_interval + 300 + RANDOM % 400))
    elif [ $event_chance -lt 20 ]; then
        # 10% —à–∞–Ω—Å –Ω–∞ —Å—Ç—Ä–µ—Å—Å/—Ñ–∏–∑–∏—á–µ—Å–∫—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (–∫–æ—Ä–æ—Ç–∫–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã)
        rr_interval=$((rr_interval - 150 - RANDOM % 200))
    fi
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ñ–∏–∑–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º–∏ –ø—Ä–µ–¥–µ–ª–∞–º–∏ (300-2000 –º—Å)
    if [ $rr_interval -lt 300 ]; then
        rr_interval=300
    elif [ $rr_interval -gt 2000 ]; then
        rr_interval=2000
    fi
    
    echo $rr_interval
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–∏–≥–Ω–∞–ª–∞
generate_signal_quality() {
    local hour=$1
    local base_quality
    
    # –ö–∞—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ (–Ω–æ—á—å—é –ª—É—á—à–µ, –¥–Ω–µ–º —Ö—É–∂–µ –∏–∑-–∑–∞ –¥–≤–∏–∂–µ–Ω–∏—è)
    if [ $hour -ge 0 ] && [ $hour -le 6 ]; then
        base_quality=0.9  # –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –Ω–æ—á—å—é
    elif [ $hour -ge 7 ] && [ $hour -le 9 ]; then
        base_quality=0.8  # –•–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ —É—Ç—Ä–æ–º
    elif [ $hour -ge 10 ] && [ $hour -le 17 ]; then
        base_quality=0.7  # –°—Ä–µ–¥–Ω–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ –¥–Ω–µ–º (–¥–≤–∏–∂–µ–Ω–∏–µ)
    else
        base_quality=0.85 # –•–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ –≤–µ—á–µ—Ä–æ–º
    fi
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—É—é –≤–∞—Ä–∏–∞—Ü–∏—é ¬±0.15
    local variation=$((RANDOM % 30 - 15))  # -15 to +15
    local quality=$(echo "scale=2; $base_quality + $variation / 100" | bc -l 2>/dev/null || echo $base_quality)
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º 0.3-1.0
    if (( $(echo "$quality < 0.3" | bc -l 2>/dev/null || echo 0) )); then
        quality=0.3
    elif (( $(echo "$quality > 1.0" | bc -l 2>/dev/null || echo 0) )); then
        quality=1.0
    fi
    
    echo $quality
}

echo "üíì –î–æ–±–∞–≤–ª–µ–Ω–∏–µ R-R –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤..."
TOTAL_RECORDS=0
VALID_INTERVALS=0
ANOMALOUS_INTERVALS=0
HIGH_QUALITY_COUNT=0

# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
for i in {0..29}; do
    echo "üìÖ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–µ–Ω—å -$i..."
    
    for hour in {0..23}; do  # –î–∞–Ω–Ω—ã–µ –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 50-120 R-R –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –≤ —á–∞—Å (–∏–º–∏—Ç–∞—Ü–∏—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞)
        intervals_per_hour=$((50 + RANDOM % 70))
        
        for ((j=0; j<intervals_per_hour; j++)); do
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–ø–∏—Å–∏
            RR_ID=$(generate_uuid)
            
            # –í—Ä–µ–º—è —Å —Å–ª—É—á–∞–π–Ω—ã–º —Å–¥–≤–∏–≥–æ–º –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —á–∞—Å–∞
            minute=$((RANDOM % 60))
            second=$((RANDOM % 60))
            TIMESTAMP=$(date_with_time $i $hour $minute $second)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º R-R –∏–Ω—Ç–µ—Ä–≤–∞–ª
            RR_INTERVAL=$(generate_rr_interval $hour)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            SIGNAL_QUALITY=$(generate_signal_quality $hour)
            BATTERY_LEVEL=$((80 + RANDOM % 20))  # 80-100%
            MOTION_DETECTED=$((RANDOM % 2))      # 0 –∏–ª–∏ 1
            DEVICE_TEMP=$(echo "scale=1; 36.0 + $(($RANDOM % 40)) / 10" | bc -l 2>/dev/null || echo "36.5")
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            if [ $RR_INTERVAL -ge 300 ] && [ $RR_INTERVAL -le 2000 ]; then
                VALID_INTERVALS=$((VALID_INTERVALS + 1))
            else
                ANOMALOUS_INTERVALS=$((ANOMALOUS_INTERVALS + 1))
            fi
            
            if (( $(echo "$SIGNAL_QUALITY > 0.8" | bc -l 2>/dev/null || echo 0) )); then
                HIGH_QUALITY_COUNT=$((HIGH_QUALITY_COUNT + 1))
            fi
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º R-R –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ InfluxDB
            docker exec influxdb influx write \
                --bucket $INFLUX_BUCKET \
                --org $INFLUX_ORG \
                --token $INFLUX_TOKEN \
                --precision s \
                "rr_intervals,id=$RR_ID,user_id=$USER_ID,device_id=$DEVICE_ID,quality_level=high rr_interval_ms=${RR_INTERVAL}i,signal_quality=$SIGNAL_QUALITY,battery_level=${BATTERY_LEVEL}i,motion_detected=${MOTION_DETECTED},device_temp=$DEVICE_TEMP $TIMESTAMP"
            
            TOTAL_RECORDS=$((TOTAL_RECORDS + 1))
        done
    done
done

echo ""
echo "üéâ R-R –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!"
echo ""
echo "üìà –î–æ–±–∞–≤–ª–µ–Ω–æ:"
echo "   ‚Ä¢ $TOTAL_RECORDS R-R –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π"
echo "   ‚Ä¢ –í —Å—Ä–µ–¥–Ω–µ–º $(( TOTAL_RECORDS / 30 )) –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –≤ –¥–µ–Ω—å"
echo ""
echo "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞:"
echo "   ‚Ä¢ –í–∞–ª–∏–¥–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã (300-2000 –º—Å): $VALID_INTERVALS"
echo "   ‚Ä¢ –ê–Ω–æ–º–∞–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã: $ANOMALOUS_INTERVALS"
echo "   ‚Ä¢ –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–∞ (>0.8): $HIGH_QUALITY_COUNT"
echo "   ‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: $(( VALID_INTERVALS * 100 / TOTAL_RECORDS ))%"
echo ""
echo "üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –º–æ–∂–Ω–æ:"
echo "   ‚Ä¢ –í Web UI: http://localhost:8086"
echo "   ‚Ä¢ –ß–µ—Ä–µ–∑ API –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:"
echo "     curl -H \"Authorization: Bearer YOUR_JWT_TOKEN\" \\"
echo "          \"http://localhost:8080/api/v1/health/rr-intervals?from=2024-01-01&to=2024-12-31\""
echo ""
echo "üí° Flux –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:"
echo "   from(bucket: \"health-data\") |> range(start: -30d) |> filter(fn: (r) => r._measurement == \"rr_intervals\")"
echo ""
echo "üè∑Ô∏è –í—Å–µ –∑–∞–ø–∏—Å–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç —Ç–µ–≥–∏:"
echo "   ‚Ä¢ id - —É–Ω–∏–∫–∞–ª—å–Ω—ã–π UUID –∑–∞–ø–∏—Å–∏"
echo "   ‚Ä¢ user_id - $USER_ID"
echo "   ‚Ä¢ device_id - $DEVICE_ID"
echo "   ‚Ä¢ quality_level - —É—Ä–æ–≤–µ–Ω—å –∫–∞—á–µ—Å—Ç–≤–∞ —Å–∏–≥–Ω–∞–ª–∞"
echo ""
echo "üìä –ü–æ–ª—è –¥–∞–Ω–Ω—ã—Ö:"
echo "   ‚Ä¢ rr_interval_ms - R-R –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö"
echo "   ‚Ä¢ signal_quality - –∫–∞—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–∞ (0.0-1.0)"
echo "   ‚Ä¢ battery_level - —É—Ä–æ–≤–µ–Ω—å –∑–∞—Ä—è–¥–∞ (0-100)"
echo "   ‚Ä¢ motion_detected - —Ñ–ª–∞–≥ –¥–≤–∏–∂–µ–Ω–∏—è (0/1)"
echo "   ‚Ä¢ device_temp - —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (¬∞C)"
echo ""
echo "üñ•Ô∏è –°–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –Ω–∞: $OS_TYPE" 