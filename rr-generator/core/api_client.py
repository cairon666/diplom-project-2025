"""
API –∫–ª–∏–µ–Ω—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ Health API
"""

import requests
import json
from typing import List, Dict, Optional
from datetime import datetime, timedelta, timezone
import time
import os

from .data_generator import RRDataPoint


class HealthAPIClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å Health API"""
    
    def __init__(self, api_url: str, auth_token: Optional[str] = None):
        self.api_url = api_url.rstrip('/')
        self.auth_token = auth_token or os.getenv('AUTH_TOKEN')
        self.session = requests.Session()
        
        if self.auth_token:
            self.session.headers.update({
                'Authorization': f'Bearer {self.auth_token}',
                'Content-Type': 'application/json'
            })
    
    def upload_all_datasets(self, datasets: Dict[str, List[RRDataPoint]], 
                          batch_size: int = 100) -> Dict:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –Ω–∞–±–æ—Ä—ã –¥–∞–Ω–Ω—ã—Ö"""
        results = {}
        
        for dataset_name, data_points in datasets.items():
            print(f"üì§ –ó–∞–≥—Ä—É–∑–∫–∞ {dataset_name}: {len(data_points)} —Ç–æ—á–µ–∫...")
            
            try:
                upload_result = self.upload_rr_data(data_points, batch_size)
                results[dataset_name] = upload_result
                
                if upload_result['success']:
                    uploaded = upload_result['uploaded_count']
                    valid = upload_result.get('valid_count', uploaded)
                    print(f"‚úÖ {dataset_name}: {uploaded} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ, {valid} –≤–∞–ª–∏–¥–Ω—ã—Ö")
                else:
                    print(f"‚ùå {dataset_name}: –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å")
                
            except Exception as e:
                results[dataset_name] = {
                    'success': False,
                    'error': str(e),
                    'uploaded_count': 0,
                    'valid_count': 0
                }
                print(f"‚ùå {dataset_name}: –æ—à–∏–±–∫–∞ - {e}")
        
        return results
    
    def upload_rr_data(self, data_points: List[RRDataPoint], 
                      batch_size: int = 100) -> Dict:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç R-R –¥–∞–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç–∞–º–∏"""
        if not data_points:
            return {'success': True, 'uploaded_count': 0, 'batches': 0}
        
        total_points = len(data_points)
        uploaded_count = 0
        valid_count = 0
        batch_count = 0
        errors = []
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –ø–∞–∫–µ—Ç—ã
        for i in range(0, total_points, batch_size):
            batch = data_points[i:i + batch_size]
            batch_count += 1
            
            try:
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç API
                api_data = self._convert_to_api_format(batch)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∞–∫–µ—Ç
                response = self._send_batch(api_data)
                
                if response['success']:
                    processed = response.get('processed_count', len(batch))
                    valid = response.get('valid_count', len(batch))
                    uploaded_count += processed
                    valid_count += valid
                    print(f"  –ü–∞–∫–µ—Ç {batch_count}: ‚úÖ {processed} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ, {valid} –≤–∞–ª–∏–¥–Ω—ã—Ö")
                else:
                    errors.append(f"–ü–∞–∫–µ—Ç {batch_count}: {response.get('error', 'Unknown error')}")
                    print(f"  –ü–∞–∫–µ—Ç {batch_count}: ‚ùå {response.get('error')}")
                
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏
                time.sleep(0.1)
                
            except Exception as e:
                error_msg = f"–ü–∞–∫–µ—Ç {batch_count}: {str(e)}"
                errors.append(error_msg)
                print(f"  –ü–∞–∫–µ—Ç {batch_count}: ‚ùå {e}")
        
        return {
            'success': len(errors) == 0,
            'uploaded_count': uploaded_count,
            'valid_count': valid_count,
            'total_count': total_points,
            'batches': batch_count,
            'errors': errors,
            'upload_rate': uploaded_count / total_points if total_points > 0 else 0
        }
    
    def _convert_to_api_format(self, data_points: List[RRDataPoint]) -> Dict:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç API"""
        if not data_points:
            return {"device_id": "", "intervals": []}
        
        # –ë–µ—Ä–µ–º device_id –∏–∑ –ø–µ—Ä–≤–æ–π —Ç–æ—á–∫–∏ (–≤—Å–µ —Ç–æ—á–∫–∏ –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π device_id)
        device_id = data_points[0].device_id
        
        return {
            "device_id": device_id,
            "intervals": [
                {
                    "user_id": dp.user_id,
                    "device_id": dp.device_id,
                    "timestamp": self._format_timestamp_for_api(dp.timestamp),
                    "rr_interval_ms": int(round(dp.rr_interval_ms)),  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ int
                    "quality_score": dp.quality_score,
                    "is_anomaly": dp.is_anomaly,
                    "source": dp.source_condition
                }
                for dp in data_points
            ]
        }
    
    def _format_timestamp_for_api(self, timestamp: datetime) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç timestamp –¥–ª—è API"""
        # –ï—Å–ª–∏ timestamp —É–∂–µ –≤ UTC, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –∫–∞–∫ –µ—Å—Ç—å
        if timestamp.tzinfo is None:
            # Naive datetime - —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —ç—Ç–æ —É–∂–µ UTC
            return timestamp.isoformat() + "Z"
        elif timestamp.utcoffset() == timedelta(0):
            # –£–∂–µ –≤ UTC
            return timestamp.replace(tzinfo=None).isoformat() + "Z"
        else:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ UTC
            utc_timestamp = timestamp.astimezone(timezone.utc)
            return utc_timestamp.replace(tzinfo=None).isoformat() + "Z"
    
    def _send_batch(self, data: Dict) -> Dict:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–¥–∏–Ω –ø–∞–∫–µ—Ç –¥–∞–Ω–Ω—ã—Ö"""
        try:
            response = self.session.post(
                f"{self.api_url}/v1/rr-intervals/batch",
                json=data,
                timeout=30
            )
            
            if response.status_code == 201:
                # –£—Å–ø–µ—à–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –∫—Ä–∞—Ç–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                response_data = response.json()
                processed = response_data.get('processed_count', 0)
                valid = response_data.get('valid_count', 0)
                return {
                    'success': True, 
                    'processed_count': processed,
                    'valid_count': valid
                }
            elif response.status_code == 200:
                response_data = response.json()
                processed = response_data.get('processed_count', 0)
                valid = response_data.get('valid_count', 0)
                return {
                    'success': True, 
                    'processed_count': processed,
                    'valid_count': valid
                }
            elif response.status_code == 401:
                return {'success': False, 'error': '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω'}
            elif response.status_code == 413:
                return {'success': False, 'error': '–ü–∞–∫–µ—Ç —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π'}
            else:
                return {
                    'success': False, 
                    'error': f'HTTP {response.status_code}: {response.text[:200]}...'  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –æ—à–∏–±–∫–∏
                }
                
        except requests.exceptions.Timeout:
            return {'success': False, 'error': 'Timeout –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ'}
        except requests.exceptions.ConnectionError:
            return {'success': False, 'error': '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º'}
        except Exception as e:
            return {'success': False, 'error': str(e)}
    
    def test_connection(self) -> Dict:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å API"""
        try:
            response = self.session.get(f"{self.api_url}/health", timeout=10)
            
            if response.status_code == 200:
                return {
                    'success': True, 
                    'message': '–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ',
                    'server_info': response.json()
                }
            else:
                return {
                    'success': False,
                    'error': f'–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status_code}'
                }
                
        except Exception as e:
            return {
                'success': False,
                'error': f'–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {str(e)}'
            }
    
    def get_user_data_summary(self, user_id: str) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–≤–æ–¥–∫—É –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            response = self.session.get(
                f"{self.api_url}/v1/users/{user_id}/rr-intervals/summary",
                timeout=10
            )
            
            if response.status_code == 200:
                return {'success': True, 'data': response.json()}
            else:
                return {'success': False, 'error': f'HTTP {response.status_code}'}
                
        except Exception as e:
            return {'success': False, 'error': str(e)}
    
    def delete_test_data(self, user_ids: List[str]) -> Dict:
        """–£–¥–∞–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"""
        results = {}
        
        for user_id in user_ids:
            try:
                response = self.session.delete(
                    f"{self.api_url}/v1/users/{user_id}/rr-intervals",
                    timeout=30
                )
                
                if response.status_code in [200, 204]:
                    results[user_id] = {'success': True, 'message': '–î–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã'}
                else:
                    results[user_id] = {
                        'success': False, 
                        'error': f'HTTP {response.status_code}'
                    }
                    
            except Exception as e:
                results[user_id] = {'success': False, 'error': str(e)}
        
        return results 