#!/usr/bin/env python3
"""
ü´Ä –ï–¥–∏–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä R-R –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã

–û–¥–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ª—é–±—ã—Ö –Ω–∞–±–æ—Ä–æ–≤ –¥–∞–Ω–Ω—ã—Ö:
- –•–æ—Ä–æ—à–∏–µ –∏ –ø–ª–æ—Ö–∏–µ –¥–∞–Ω–Ω—ã–µ
- –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏  
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤ API
- –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –æ—Ç—á–µ—Ç—ã

–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
    # –°–æ–∑–¥–∞—Ç—å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    python generate_all_data.py --user-id UUID --realistic-day
    
    # –°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç —Å –ø–ª–æ—Ö–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    python generate_all_data.py --stress-test --bad-ratio 50
    
    # –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–æ–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    python generate_all_data.py --condition atrial_fibrillation --duration 2h
"""

import argparse
import sys
import os
from datetime import datetime, timedelta
from typing import Dict, List, Optional
import uuid
import json

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from core.data_generator import UnifiedDataGenerator, RRDataPoint
from core.medical_conditions import MedicalConditions
from core.validators import DataValidator
from core.api_client import HealthAPIClient
from utils.time_utils import TimeUtils
from utils.reporting import ReportGenerator
from configs.config_loader import ConfigLoader


def main():
    parser = create_argument_parser()
    args = parser.parse_args()
    
    print("ü´Ä R-R Intervals Data Generator v2.0")
    print("=" * 50)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    config = ConfigLoader()
    generator = UnifiedDataGenerator(config)
    validator = DataValidator(config)
    api_client = HealthAPIClient(args.api_url, args.auth_token)
    reporter = ReportGenerator()
    
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        scenario = determine_scenario(args)
        print(f"üìã –°—Ü–µ–Ω–∞—Ä–∏–π: {scenario['name']}")
        print(f"üìÖ –ü–µ—Ä–∏–æ–¥: {scenario['start_time']} - {scenario['end_time']}")
        print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {scenario['user_id']}")
        print()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        datasets = generate_data(generator, scenario, args)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö
        preview_data_samples(datasets)
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        validation_results = validate_data(validator, datasets)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
        save_results = save_data_locally(datasets, scenario)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ API –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Ç–æ–∫–µ–Ω
        upload_results = None
        if args.upload and args.auth_token:
            upload_results = upload_to_api(api_client, datasets, args.batch_size)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        generate_final_report(reporter, {
            'scenario': scenario,
            'datasets': datasets,
            'validation': validation_results,
            'save': save_results,
            'upload': upload_results
        })
        
        print("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        sys.exit(1)


def create_argument_parser():
    """–°–æ–∑–¥–∞–µ—Ç –ø–∞—Ä—Å–µ—Ä –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ —Å –≤—Å–µ–º–∏ –æ–ø—Ü–∏—è–º–∏"""
    parser = argparse.ArgumentParser(
        description='–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä R-R –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:

  –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –¥–µ–Ω—å:
    python generate_all_data.py --realistic-day --user-id "uuid-here" --upload

  –°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:
    python generate_all_data.py --stress-test --bad-ratio 30 --users 10

  –ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:
    python generate_all_data.py --condition atrial_fibrillation --duration 4h

  –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥:
    python generate_all_data.py --start "2025-06-01 00:00" --end "2025-06-01 23:59"

  –¢–æ–ª—å–∫–æ —Ö–æ—Ä–æ—à–∏–µ –¥–∞–Ω–Ω—ã–µ (–±–µ–∑ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö):
    python generate_all_data.py --realistic-day --no-invalid-data --upload
        """
    )
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    parser.add_argument('--user-id', help='UUID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω)')
    parser.add_argument('--device-id', help='UUID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (–∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω)')
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    time_group = parser.add_mutually_exclusive_group()
    time_group.add_argument('--realistic-day', action='store_true', 
                           help='–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –¥–µ–Ω—å (24 —á–∞—Å–∞)')
    time_group.add_argument('--start', help='–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ (YYYY-MM-DD HH:MM)')
    time_group.add_argument('--duration', help='–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (1h, 30m, 2d)')
    
    parser.add_argument('--end', help='–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è (YYYY-MM-DD HH:MM)')
    
    # –°—Ü–µ–Ω–∞—Ä–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    scenario_group = parser.add_mutually_exclusive_group()
    scenario_group.add_argument('--stress-test', action='store_true',
                               help='–°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –±–æ–ª—å—à–∏–º –æ–±—ä–µ–º–æ–º –¥–∞–Ω–Ω—ã—Ö')
    scenario_group.add_argument('--condition', choices=MedicalConditions.get_available_conditions(),
                               help='–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ')
    scenario_group.add_argument('--custom-scenario', help='–ü—É—Ç—å –∫ YAML —Ñ–∞–π–ª—É —Å–æ —Å—Ü–µ–Ω–∞—Ä–∏–µ–º')
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö
    parser.add_argument('--good-bad-ratio', default='70:30', 
                       help='–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ö–æ—Ä–æ—à–∏—Ö –∫ –ø–ª–æ—Ö–∏–º –¥–∞–Ω–Ω—ã–º (default: 70:30)')
    parser.add_argument('--bad-ratio', type=int, default=30,
                       help='–ü—Ä–æ—Ü–µ–Ω—Ç –ø–ª–æ—Ö–∏—Ö –¥–∞–Ω–Ω—ã—Ö (0-100, default: 30)')
    parser.add_argument('--no-invalid-data', action='store_true',
                       help='–û—Ç–∫–ª—é—á–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç–µ—Å—Ç–æ–≤—ã—Ö –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ —Ö–æ—Ä–æ—à–∏–µ –¥–∞–Ω–Ω—ã–µ)')
    
    # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    parser.add_argument('--users', type=int, default=1,
                       help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏')
    parser.add_argument('--concurrent', action='store_true',
                       help='–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
    
    # API –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    parser.add_argument('--upload', action='store_true',
                       help='–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ API')
    parser.add_argument('--api-url', default='http://localhost:8080',
                       help='URL API —Å–µ—Ä–≤–µ—Ä–∞')
    parser.add_argument('--auth-token', 
                       help='JWT —Ç–æ–∫–µ–Ω (–∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π AUTH_TOKEN)')
    parser.add_argument('--batch-size', type=int, default=100,
                       help='–†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤ API')
    
    # –í—ã–≤–æ–¥ –∏ –æ—Ç—á–µ—Ç—ã
    parser.add_argument('--output-dir', default='generated_data',
                       help='–ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤')
    parser.add_argument('--report', action='store_true', default=True,
                       help='–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç')
    parser.add_argument('--plot', action='store_true',
                       help='–°–æ–∑–¥–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏')
    parser.add_argument('--quiet', action='store_true',
                       help='–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥')
    
    # –û—Ç–ª–∞–¥–∫–∞
    parser.add_argument('--dry-run', action='store_true',
                       help='–ü–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –±—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –±–µ–∑ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏')
    parser.add_argument('--validate-only', action='store_true',
                       help='–¢–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö')
    
    return parser


def determine_scenario(args) -> Dict:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤"""
    scenario = {
        'user_id': args.user_id or str(uuid.uuid4()),
        'device_id': args.device_id or str(uuid.uuid4()),
    }
    
    # –ü–†–ò–û–†–ò–¢–ï–¢ 1: –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
    if args.condition:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        if args.start:
            start_time = TimeUtils.parse_datetime_msk(args.start)
            if args.end:
                end_time = TimeUtils.parse_datetime_msk(args.end)
            elif args.duration:
                end_time = start_time + TimeUtils.parse_duration(args.duration)
            else:
                end_time = start_time + timedelta(hours=1)
        else:
            # –î–ª—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π –ø–µ—Ä–∏–æ–¥
            start_time = datetime.now(TimeUtils.MSK_TIMEZONE)
            duration = TimeUtils.parse_duration(args.duration) if args.duration else timedelta(hours=2)
            end_time = start_time + duration
        
        scenario.update({
            'name': f'–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {args.condition}',
            'start_time': start_time,
            'end_time': end_time,
            'type': 'medical_condition',
            'condition': args.condition
        })
    
    # –ü–†–ò–û–†–ò–¢–ï–¢ 2: –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –¥–µ–Ω—å
    elif args.realistic_day:
        start_time = datetime.now(TimeUtils.MSK_TIMEZONE).replace(hour=0, minute=0, second=0, microsecond=0)
        end_time = start_time + timedelta(days=1)
        scenario.update({
            'name': '–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –¥–µ–Ω—å',
            'start_time': start_time,
            'end_time': end_time,
            'type': 'realistic_day'
        })
    
    # –ü–†–ò–û–†–ò–¢–ï–¢ 3: –°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç
    elif args.stress_test:
        # –°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç: –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
        end_time = datetime.now(TimeUtils.MSK_TIMEZONE)
        start_time = end_time - timedelta(days=1)
        
        scenario.update({
            'name': '–°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ',
            'start_time': start_time,
            'end_time': end_time,
            'type': 'stress_test'
        })
    
    # –ü–†–ò–û–†–ò–¢–ï–¢ 4: –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–π –ø–µ—Ä–∏–æ–¥ –≤—Ä–µ–º–µ–Ω–∏
    elif args.start:
        start_time = TimeUtils.parse_datetime_msk(args.start)
        if args.end:
            end_time = TimeUtils.parse_datetime_msk(args.end)
        elif args.duration:
            end_time = start_time + TimeUtils.parse_duration(args.duration)
        else:
            end_time = start_time + timedelta(hours=1)  # default 1 hour
            
        scenario.update({
            'name': '–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–π –ø–µ—Ä–∏–æ–¥',
            'start_time': start_time,
            'end_time': end_time,
            'type': 'custom_period'
        })
    
    else:
        # Default: –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
        end_time = datetime.now(TimeUtils.MSK_TIMEZONE)
        start_time = end_time - timedelta(hours=1)
        
        scenario.update({
            'name': '–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç',
            'start_time': start_time,
            'end_time': end_time,
            'type': 'quick_test'
        })
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö
    scenario['good_bad_ratio'] = parse_ratio(args.good_bad_ratio)
    scenario['bad_ratio'] = args.bad_ratio
    scenario['users_count'] = args.users
    
    # –ï—Å–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    if args.no_invalid_data:
        scenario['good_bad_ratio'] = (100, 0)
        scenario['bad_ratio'] = 0
    
    return scenario


def parse_ratio(ratio_str: str) -> tuple:
    """–ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Ç–∏–ø–∞ '70:30' –≤ –∫–æ—Ä—Ç–µ–∂ (70, 30)"""
    try:
        parts = ratio_str.split(':')
        return (int(parts[0]), int(parts[1]))
    except:
        return (70, 30)  # default


def generate_data(generator: UnifiedDataGenerator, scenario: Dict, args) -> Dict:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å–æ–≥–ª–∞—Å–Ω–æ —Å—Ü–µ–Ω–∞—Ä–∏—é"""
    print("üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö...")
    
    if args.dry_run:
        print("üîç –†–µ–∂–∏–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:")
        generator.preview_generation(scenario)
        return {}
    
    return generator.generate_scenario_data(scenario)


def validate_data(validator: DataValidator, datasets: Dict) -> Dict:
    """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"""
    if not datasets:
        return {}
        
    print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö...")
    return validator.validate_all_datasets(datasets)


def save_data_locally(datasets: Dict, scenario: Dict) -> Dict:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ª–æ–∫–∞–ª—å–Ω–æ"""
    if not datasets:
        return {}
        
    print("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...")
    # Implementation will be in the actual generator
    return {'status': 'saved', 'files': []}


def upload_to_api(api_client: HealthAPIClient, datasets: Dict, batch_size: int) -> Dict:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ API"""
    if not datasets:
        return {}
        
    print("üì§ –ó–∞–≥—Ä—É–∑–∫–∞ –≤ API...")
    return api_client.upload_all_datasets(datasets, batch_size)


def generate_final_report(reporter: ReportGenerator, results: Dict):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç"""
    print("üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞...")
    reporter.generate_comprehensive_report(results)


def preview_data_samples(datasets: Dict[str, List[RRDataPoint]], num_samples: int = 3):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–º–µ—Ä—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    print(f"\nüìã –ü—Ä–∏–º–µ—Ä—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:")
    
    for dataset_name, data_points in datasets.items():
        if not data_points:
            continue
            
        print(f"\n‚Ä¢ {dataset_name.upper()}: (–≤—Å–µ–≥–æ {len(data_points)} —Ç–æ—á–µ–∫)")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤
        samples = data_points[:num_samples] if len(data_points) >= num_samples else data_points
        
        for i, point in enumerate(samples, 1):
            bpm = round(60000 / point.rr_interval_ms) if point.rr_interval_ms > 0 else 0
            print(f"    {i}. R-R: {point.rr_interval_ms:.0f} –º—Å ‚Üí {bpm} BPM | –ö–∞—á–µ—Å—Ç–≤–æ: {point.quality_score:.2f} | –ò—Å—Ç–æ—á–Ω–∏–∫: {point.source_condition}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        rr_values = [p.rr_interval_ms for p in data_points]
        bpm_values = [60000/rr for rr in rr_values if rr > 0]
        
        print(f"    üìä –î–∏–∞–ø–∞–∑–æ–Ω R-R: {min(rr_values):.0f}-{max(rr_values):.0f} –º—Å")
        print(f"    üíì –î–∏–∞–ø–∞–∑–æ–Ω BPM: {min(bpm_values):.0f}-{max(bpm_values):.0f}")
        print(f"    üìà –°—Ä–µ–¥–Ω–∏–π BPM: {sum(bpm_values)/len(bpm_values):.0f}")


if __name__ == "__main__":
    main() 